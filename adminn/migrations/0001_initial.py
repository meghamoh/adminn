# Generated by Django 5.1.1 on 2024-10-06 06:42

import adminn.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=50)),
                ('image', models.ImageField(blank=True, null=True, upload_to='category-images/', validators=[adminn.models.validate_file_size])),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Collar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('lead_quantity', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Country_Codes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=100, unique=True)),
                ('calling_code', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'ordering': ['calling_code'],
            },
        ),
        migrations.CreateModel(
            name='Franchise_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('details', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Service_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('details', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Franchisee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_id', models.CharField(blank=True, editable=False, max_length=10, unique=True)),
                ('about', models.TextField()),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='f-profile_images/', validators=[adminn.models.validate_file_size])),
                ('revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('dealers', models.IntegerField(blank=True, null=True)),
                ('service_providers', models.IntegerField(blank=True, null=True)),
                ('valid_from', models.DateTimeField()),
                ('valid_up_to', models.DateTimeField()),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=10)),
                ('verification_id', models.CharField(blank=True, max_length=255, null=True)),
                ('verificationid_number', models.CharField(blank=True, max_length=50, null=True)),
                ('community_name', models.CharField(max_length=50)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='franchisee_type', to='adminn.franchise_type')),
            ],
        ),
        migrations.CreateModel(
            name='Dealer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_id', models.CharField(blank=True, editable=False, max_length=10, unique=True)),
                ('about', models.TextField()),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='d-profile-images/', validators=[adminn.models.validate_file_size])),
                ('service_providers', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=10)),
                ('verification_id', models.CharField(blank=True, max_length=255, null=True)),
                ('verificationid_number', models.CharField(blank=True, max_length=50, null=True)),
                ('id_copy', models.FileField(blank=True, null=True, upload_to='id-dealer/', validators=[adminn.models.validate_file_size])),
                ('franchisee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='adminn.franchisee')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.IntegerField()),
                ('invoice_type', models.CharField(choices=[('service_request', 'Service Request'), ('dealer_payment', 'Dealer Payment'), ('provider_payment', 'Service Provider Payment')], max_length=20)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('invoice_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('appointment_date', models.DateTimeField()),
                ('additional_requirements', models.TextField(blank=True, null=True)),
                ('accepted_terms', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_invoices', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_invoices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=15)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('credit_card', 'Credit Card'), ('paypal', 'PayPal'), ('cash', 'Cash')], max_length=50)),
                ('payment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='adminn.invoice')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_payments', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_payments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_id', models.CharField(blank=True, editable=False, max_length=20, unique=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='s-profile-images/', validators=[adminn.models.validate_file_size])),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('about', models.TextField()),
                ('address_proof_document', models.CharField(blank=True, max_length=255, null=True)),
                ('id_number', models.CharField(blank=True, max_length=50, null=True)),
                ('address_proof_file', models.FileField(blank=True, null=True, upload_to='id-service-pro/', validators=[adminn.models.validate_file_size])),
                ('payout_required', models.CharField(choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly')], max_length=10)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=10)),
                ('verification_by_dealer', models.CharField(choices=[('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PENDING', 'Pending')], default='PENDING', max_length=20)),
                ('accepted_terms', models.BooleanField(default=False)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='adminn.dealer')),
                ('franchisee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='adminn.franchisee')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be between 9 and 15 digits.', regex='^\\d{9,15}$')])),
                ('payment_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('credit_card', 'Credit Card'), ('paypal', 'PayPal'), ('cash', 'Cash')], max_length=20)),
                ('account_holder_name', models.CharField(max_length=50)),
                ('bank_name', models.CharField(max_length=50)),
                ('bank_branch', models.CharField(max_length=50)),
                ('account_number', models.CharField(max_length=50)),
                ('ifsc_code', models.CharField(max_length=50)),
                ('supporting_documents', models.FileField(blank=True, null=True, upload_to='payment-request/', validators=[adminn.models.validate_file_size])),
                ('country_code', models.ForeignKey(blank=True, max_length=25, null=True, on_delete=django.db.models.deletion.SET_NULL, to='adminn.country_codes')),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='to_paymentrequest', to='adminn.dealer')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='from_paymentrequest', to='adminn.serviceprovider')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRegister',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('gstcode', models.CharField(max_length=50)),
                ('amount_forthis_service', models.DecimalField(decimal_places=2, max_digits=10)),
                ('license', models.FileField(blank=True, null=True, upload_to='service-license/', validators=[adminn.models.validate_file_size])),
                ('image', models.ImageField(blank=True, null=True, upload_to='service-images/', validators=[adminn.models.validate_file_size])),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=10)),
                ('accepted_terms', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='serviceregister_category', to='adminn.category')),
                ('collar', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='collar', to='adminn.collar')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='adminn.serviceprovider')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('acceptance_status', models.CharField(choices=[('accept', 'accept'), ('decline', 'decline'), ('pending', 'pending')], default='pending', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('availability_from', models.DateTimeField()),
                ('availability_to', models.DateTimeField()),
                ('additional_notes', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='service_request/', validators=[adminn.models.validate_file_size])),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='servicerequest', to='adminn.serviceregister')),
            ],
        ),
        migrations.AddField(
            model_name='invoice',
            name='service_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices', to='adminn.servicerequest'),
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('images', models.ImageField(blank=True, null=True, upload_to='complaint/', validators=[adminn.models.validate_file_size])),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_compliant', to=settings.AUTH_USER_MODEL)),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_compliant', to=settings.AUTH_USER_MODEL)),
                ('service_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='complaints', to='adminn.servicerequest')),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='adminn.state')),
            ],
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=50)),
                ('image', models.ImageField(blank=True, null=True, upload_to='subcategory-images/', validators=[adminn.models.validate_file_size])),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=10)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category', to='adminn.category')),
                ('service_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='service_type', to='adminn.service_type')),
            ],
        ),
        migrations.AddField(
            model_name='serviceregister',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='serviceregister_subcategory', to='adminn.subcategory'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_customer', models.BooleanField(default=False)),
                ('is_service_provider', models.BooleanField(default=False)),
                ('is_franchisee', models.BooleanField(default=False)),
                ('is_dealer', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('full_name', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=30)),
                ('landmark', models.CharField(blank=True, max_length=255, null=True)),
                ('pin_code', models.CharField(max_length=10)),
                ('watsapp', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('country_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='adminn.country_codes')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='adminn.district')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='app1_user_groups', to='auth.group', verbose_name='groups')),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='adminn.state')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='app1_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='servicerequest',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='from_servicerequest', to='adminn.user'),
        ),
        migrations.AddField(
            model_name='servicerequest',
            name='service_provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='to_servicerequest', to='adminn.user'),
        ),
        migrations.AddField(
            model_name='serviceprovider',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_provider', to='adminn.user'),
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otp_received_user', to='adminn.user')),
            ],
        ),
        migrations.AddField(
            model_name='franchisee',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='franchisee', to='adminn.user'),
        ),
        migrations.AddField(
            model_name='dealer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dealer', to='adminn.user'),
        ),
        migrations.CreateModel(
            name='CustomerReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('image', models.ImageField(blank=True, null=True, upload_to='reviews/', validators=[adminn.models.validate_file_size])),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='from_review', to='adminn.user')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='to_review', to='adminn.user')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_id', models.CharField(blank=True, editable=False, max_length=20, unique=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='c-profile-images/', validators=[adminn.models.validate_file_size])),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer', to='adminn.user')),
            ],
        ),
    ]
